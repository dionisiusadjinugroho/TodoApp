@page "/Login"
@inject NavigationManager Navigation
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer
@using TodoBlazorApp.Models
@using Newtonsoft.Json
@inject IConfiguration Configuration

<div class="container vh-100 d-flex justify-content-center align-items-center">
    <div class="card shadow-lg p-4" style="max-width: 400px; width: 100%;">
        <h3 class="text-center mb-4">Login</h3>
        <EditForm OnValidSubmit="HandleLogin" EditContext="editContext">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <label for="username" class="form-label">Username</label>
                <InputText id="username" class="form-control" @bind-Value="loginModel.Username" />
                <ValidationMessage For="@(() => loginModel.Username)" />
            </div>

            <div class="mb-3">
                <label for="password" class="form-label">Password</label>
                <InputText id="password" type="password" class="form-control" @bind-Value="loginModel.Password" />
                <ValidationMessage For="@(() => loginModel.Password)" />
            </div>

            <button type="submit" class="btn btn-primary w-100 mb-2">Login</button>
            <button class="btn btn-primary w-100" @onclick="ButtonRegisterClicked">Register</button>
        </EditForm>
    </div>
</div>

@code {
    private LoginModel loginModel = new LoginModel();
    private EditContext editContext;
    private ValidationMessageStore messageStore;

    protected override void OnInitialized()
    {
        editContext = new EditContext(loginModel);
        messageStore = new ValidationMessageStore(editContext);
    }

    private async Task HandleLogin()
    {
        messageStore.Clear();

        var loginPayload = new
        {
            username = loginModel.Username,
            password = loginModel.Password
        };

        try
        {
            var aaa = $"{Configuration["ApiBaseUrl"]}/api/Todo/Login";
            var response = await Http.PostAsJsonAsync($"{Configuration["ApiBaseUrl"]}/api/Todo/Login", loginPayload);

            if (response.IsSuccessStatusCode)
            {
                //Delete Old Cookie
                await JSRuntime.InvokeVoidAsync("eval", "document.cookie = 'UserID=; path=/; expires=Thu, 01 Jan 1970 00:00:00 GMT';");

                var responseContent = await response.Content.ReadAsStringAsync();
                var user = JsonConvert.DeserializeObject<User>(responseContent);
                var expiresAt = DateTime.UtcNow.AddMinutes(60).ToString("R");
                await JSRuntime.InvokeVoidAsync("eval", $"document.cookie = 'UserID={user.UserId}; path=/; expires={expiresAt}';");

                Navigation.NavigateTo("/home");
            }
            else
            {
                messageStore.Add(() => loginModel.Username, "Login failed. Please check your username and password.");
                editContext.NotifyValidationStateChanged();
            }
        }
        catch (Exception ex)
        {
            messageStore.Add(() => loginModel.Username, $"An error occurred: {ex.Message}");
            editContext.NotifyValidationStateChanged();
        }
    }

    public void ButtonRegisterClicked()
    {
        Navigation.NavigateTo("/register");
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "Username is required")]
        public string Username { get; set; }

        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; }
    }
}
