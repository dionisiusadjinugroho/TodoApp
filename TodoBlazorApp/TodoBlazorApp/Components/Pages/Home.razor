@page "/"
@page "/Home"
@layout Layout.MainLayout
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer
@inject NavigationManager Navigation
@inject HttpClient Http
@using TodoBlazorApp.Models
@inject IConfiguration Configuration

<PageTitle>Home</PageTitle>
<h3>Hello, @user.Username</h3>
<div>
    <button class="btn btn-primary mb-3" @onclick="ShowAddForm">Add Activity</button>
</div>

@if (isAddFormVisible)
{
    <div class="card p-3 mb-3">
        <h3>Add New Activity</h3>
        <EditForm Model="newActivity" OnValidSubmit="AddActivity">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <label>Subject</label>
                <InputText class="form-control" @bind-Value="newActivity.Subject"/>
            </div>

            <div class="mb-3">
                <label>Description</label>
                <InputText class="form-control" @bind-Value="newActivity.Description" />
            </div>

            <div class="mb-3">
                <label>Status</label>
                <InputSelect class="form-control" @bind-Value="newActivity.Status">
                    <option value="">-- Select Status --</option>
                    <option value="Unmarked">Unmarked</option>
                    <option value="Done">Done</option>
                    <option value="Cancelled">Cancelled</option>
                </InputSelect>
            </div>

            <button type="submit" class="btn btn-primary">Save</button>
        </EditForm>
    </div>
}
@if (!string.IsNullOrEmpty(currentMessageContent))
{
    <div class="alert mt-3 d-flex align-items-center @((currentMessageType == MessageType.Success) ? "alert-success" : "alert-danger")">
        <i class="bi @(currentMessageType == MessageType.Success ? "bi-check-circle" : "bi-x-circle") me-2"></i>
        <span>@currentMessageContent</span>
    </div>
}

<!-- Pagination Controls -->
<div>
    <button class="btn btn-secondary" @onclick="GoToPreviousPage" disabled="@IsPreviousDisabled">Previous</button>
    <span>Page @CurrentPage of @TotalPages</span>
    <button class="btn btn-secondary" @onclick="GoToNextPage" disabled="@IsNextDisabled">Next</button>
</div>

<table class="table">
    <thead>
        <tr>
            <th>Activity No</th>
            <th>Subject</th>
            <th>Description</th>
            <th>Status</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var activity in listActivities)
        {
            <tr>
                <td>@activity.ActivitiesNo</td>
                <td>
                    @if (editingActivity == activity)
                    {
                        <InputText class="form-control" @bind-Value="activity.Subject" />
                    }
                    else
                    {
                        @activity.Subject
                    }
                </td>
                <td>
                    @if (editingActivity == activity)
                    {
                        <InputText class="form-control" @bind-Value="activity.Description" />
                    }
                    else
                    {
                        @activity.Description
                    }
                </td>
                <td>
                    @if (editingActivity == activity)
                    {
                        <InputSelect class="form-control" @bind-Value="activity.Status">
                            <option value="Done">Done</option>
                            <option value="Unmarked">Unmarked</option>
                            <option value="Cancelled">Cancelled</option>
                        </InputSelect>
                    }
                    else
                    {
                        @activity.Status
                    }
                </td>
                <td>
                    @if (editingActivity == activity)
                    {
                        <button class="btn btn-success" @onclick="() => SaveActivity(activity)">Save</button>
                    }
                    else
                    {
                        <button class="btn btn-warning" @onclick="() => EditActivity(activity)">Edit</button>
                        <button class="btn btn-danger" @onclick="() => DeleteActivity(activity)">Delete</button>
                    }
                </td>
            </tr>
        }
    </tbody>
</table>


@code{
    bool isAddFormVisible;
    enum MessageType
    {
        Success,
        Error
    }
    MessageType currentMessageType;
    private string currentMessageContent = "";
    private ActivityModel newActivity = new ActivityModel();
    private Activity editingActivity = new Activity();
    private List<Activity> listActivities = new List<Activity>();
    private User user = new User();

    private EditContext editContext;
    private ValidationMessageStore messageStore;

    private int CurrentPage = 1;
    private int PageSize = 10;
    private int TotalPages = 1;
    private int TotalRecords = 0;

    private bool IsPreviousDisabled => CurrentPage == 1;
    private bool IsNextDisabled => CurrentPage == TotalPages;

    protected override void OnInitialized()
    {
        editContext = new EditContext(newActivity);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var userId = await JSRuntime.InvokeAsync<string>("eval", "document.cookie.split('; ').find(x => x.startsWith('UserID='))?.split('=')[1]");
            if (string.IsNullOrEmpty(userId))
            {
                Navigation.NavigateTo("/Login");
            }
            else
            {
                try
                {
                    var userinforesponse = await Http.GetAsync($"{Configuration["ApiBaseUrl"]}/api/Todo/User?UserID={userId}");
                    var userdata = await userinforesponse.Content.ReadAsStringAsync();
                    if (userinforesponse.IsSuccessStatusCode)
                    {
                        user = Newtonsoft.Json.JsonConvert.DeserializeObject<User>(userdata);
                    }

                    await LoadActivities(user.UserId);
                }
                catch (Exception ex)
                {
                    Navigation.NavigateTo("/Login");
                }
            }

            StateHasChanged();
        }
    }

    private async Task LoadActivities(int userId)
    {
        try
        {
            var response = await Http.GetAsync($"{Configuration["ApiBaseUrl"]}/api/Todo/GetAll?UserID={userId}&page={CurrentPage}&pageSize={PageSize}");
            var responseContent = await response.Content.ReadAsStringAsync();

            if (response.IsSuccessStatusCode)
            {
                var result = Newtonsoft.Json.JsonConvert.DeserializeObject<dynamic>(responseContent);
                listActivities = result.data.ToObject<List<Activity>>();
                TotalRecords = result.totalRecords;
                TotalPages = (int)Math.Ceiling((double)TotalRecords / PageSize);
            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                Navigation.NavigateTo("/Login");
            }
        }
        catch (Exception ex)
        {
            Navigation.NavigateTo("/Login");
        }
    }

    private async Task GoToNextPage()
    {
        if (CurrentPage < TotalPages)
        {
            CurrentPage++;
            await LoadActivities(user.UserId);
        }
    }

    private async Task GoToPreviousPage()
    {
        if (CurrentPage > 1)
        {
            CurrentPage--;
            await LoadActivities(user.UserId);
        }
    }

    private async Task AddActivity()
    {   
        try
        {
            var userId = await JSRuntime.InvokeAsync<string>("eval", "document.cookie.split('; ').find(x => x.startsWith('UserID='))?.split('=')[1]");
            newActivity.UserID = Convert.ToInt32(userId);
            newActivity.ActivitiesNo = "";

            var response = await Http.PostAsJsonAsync($"{Configuration["ApiBaseUrl"]}/api/Todo/InsertActivities", newActivity);
            var responseContent = await response.Content.ReadAsStringAsync();
            if (response.IsSuccessStatusCode)
            {
                var resultnewActivity = Newtonsoft.Json.JsonConvert.DeserializeObject<Activity>(responseContent);
                listActivities.Add(resultnewActivity);
                isAddFormVisible = false;
                currentMessageType = MessageType.Success;
                currentMessageContent = "Save Successfully!";

                newActivity.Subject = "";
                newActivity.Description = "";
                newActivity.Status = "";
            }
            else
            {
                currentMessageType = MessageType.Error;
                currentMessageContent = "Error message :" + responseContent;
            }
        }
        catch (Exception ex)
        {
            currentMessageType = MessageType.Error;
            currentMessageContent = "Error message :" + ex.Message;
        }
    }

    private void EditActivity(Activity activity)
    {
        HideMessage();
        editingActivity = activity;
    }

    private async Task SaveActivity(Activity activity)
    {
        try
        {
            HideMessage();
            editingActivity = null;

            var response = await Http.PostAsJsonAsync($"{Configuration["ApiBaseUrl"]}/api/Todo/UpdateActivities", activity);
            var responseContent = await response.Content.ReadAsStringAsync();
            if (response.IsSuccessStatusCode)
            {

                currentMessageType = MessageType.Success;
                currentMessageContent = "Update Successfully!";

                await OnAfterRenderAsync(false);
            }
            else
            {
                currentMessageType = MessageType.Error;
                currentMessageContent = "Error message :" + responseContent;
            }
        }
        catch (Exception ex)
        {
            currentMessageType = MessageType.Error;
            currentMessageContent = "Error message :" + ex.Message;
        }
    }

    private async Task DeleteActivity(Activity activity)
    {
        try
        {
            HideMessage();

            var response = await Http.PostAsJsonAsync($"{Configuration["ApiBaseUrl"]}/api/Todo/DeleteActivities", activity);
            var responseContent = await response.Content.ReadAsStringAsync();
            if (response.IsSuccessStatusCode)
            {
                currentMessageType = MessageType.Success;
                currentMessageContent = "Delete Successfully!";

                listActivities.Remove(activity);

                await OnAfterRenderAsync(false);
            }
            else
            {
                currentMessageType = MessageType.Error;
                currentMessageContent = "Error message :" + responseContent;
            }
        }
        catch (Exception ex)
        {
            currentMessageType = MessageType.Error;
            currentMessageContent = "Error message :" + ex.Message;
        }
    }

    private void ShowAddForm()
    {
        HideMessage();
        if (!isAddFormVisible)
        {
            isAddFormVisible = true;
        }
        else
        {
            isAddFormVisible = false;
        }
    }

    public void HideMessage()
    {
        currentMessageContent = "";
    }

    public class ActivityModel
    {
        [Required(ErrorMessage = "Subject is required")]
        public string Subject { get; set; }

        [Required(ErrorMessage = "Description is required")]
        public string Description { get; set; }

        [Required(ErrorMessage = "Status is required")]
        public string Status { get; set; }

        public int UserID { get; set; }
        public string ActivitiesNo { get; set; }
    }
}
